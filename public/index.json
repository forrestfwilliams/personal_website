[{"content":"\u003ciframe src=\"https://forrestfwilliams-los-palette.hf.space\" frameborder=\"0\" width=\"900\" height=\"650\"\u003e\u003c/iframe\u003e\n\u003ch1 id=\"usage\"\u003eUsage\u003c/h1\u003e\n\u003cp\u003eUse the \u003cstrong\u003eSatellite Heading\u003c/strong\u003e and \u003cstrong\u003eGrazing Angle\u003c/strong\u003e sliders to adjust the values for these parameters. The graphs will update, and colorbar below will display the color values for your specified satellite orientation. You can also select presets for Sentinel-1, NISAR, and horizontal/vertical orientations.\u003c/p\u003e\n\u003ch1 id=\"the-why\"\u003eThe Why\u003c/h1\u003e\n\u003cp\u003eWhen interpreting deformation measurements created using InSAR, it\u0026rsquo;s important to remember that the deformation measured is always along the SAR satellite\u0026rsquo;s line-of-sight. This means that two SAR satellites looking at the same deformation from different orientations \u003cstrong\u003ewill make different measurements of the deformation\u003c/strong\u003e. When I work with people that are not SAR experts, this subtlely is often a source of confusion and we as a community of SAR experts do not do a great of job of making it easy for them to understand this concept.\u003c/p\u003e\n\u003cp\u003eTake for instance the standard way that InSAR results are visualized. For unwrapped interfergograms, motion towards the satellite is portrayed as shades of red, and motion away from the satellite is portrayed as shades of blue. If you have InSAR data from an ascending and descending pass of the same satellite, and the motion is predominatley horizontal, areas that are red in one image will be blue in the other. If you\u0026rsquo;re not paying attention to the line-of-sight information, \u003cstrong\u003eit will look like the two InSAR images are describing very different motions!\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eIf we know that this visualization approach is ripe for misinterpretation, why are we using it!? Are there better ways we could visualize the data?\u003c/p\u003e\n\u003ch1 id=\"how-it-works\"\u003eHow It Works\u003c/h1\u003e\n\u003cp\u003eTo solve this issue, I\u0026rsquo;d like to propose a new convention for visualizing InSAR deformation results that is codified in the app at the beginning of this post. This method alleviates many of the issues associated with the traditional approach while still producing beautiful maps. It does this by encoding information about the line-of-sight into the colorscheme!\u003c/p\u003e\n\u003cp\u003eA satellite\u0026rsquo;s line-of-sight can be described by a unit vector that has x, y and z components. Conveniently, digital colors are created by red, blue and green (RGB) components. What if we could define a relationship that would allow us to translate a satellite\u0026rsquo;s line-of-sight unit vector into a unique RGB color? This is exactly what this app accomplishes! The equation for making the transformation is:\u003c/p\u003e\n\u003cdiv\u003e$$Red = (127.5 * x) + 127.5\\\\Blue = (127.5 * y) + 127.5\\\\Green = (127.5 * z) + 127.5$$\u003c/div\u003e\n\u003cp\u003eWhere x, y and z are the line-of-sight unit vector components, and RGB values are rounded to the nearest integer. You\u0026rsquo;ll notice that a unit vector of 0, 0, 0 maps to a RGB value of 128, 128, 128. This ensures that the full range of unit vector values [-1, 1] map to valid RGB values [0, 255]. Below is a visualization of the resulting colorsphere:\u003c/p\u003e\n\u003ciframe src=\"/los_colorsphere.html\" width=900 height=900 title=\"Color Sphere\"\u003e\u003c/iframe\u003e\n\u003cp\u003eThis visualization standard has a few key advantages:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eInSAR measurements with different line-of-sights are denoted by different colors, decreasing confusion.\u003c/li\u003e\n\u003cli\u003eColors denoting motion towards and away from a satellite are guaranteed to be complementary colors.\u003c/li\u003e\n\u003cli\u003eMeasurements from similar positions are similar colors.\u003c/li\u003e\n\u003cli\u003eIf the conversion equations above are known, an estimate the line-of-sight direction can be derived directly from an InSAR map.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eTry it out and let me know what you think! You can find me on Twitter at \u003ca href=\"https://twitter.com/RS_Forrest\"\u003e@RS_Forrest\u003c/a\u003e, or on \u003ca href=\"https://www.linkedin.com/in/forrest-williams-geospatial/\"\u003eLinkedIn\u003c/a\u003e. I\u0026rsquo;ve included some presets in the app above so you can try out what Sentinel-1, NISAR, vertical, and horiztonal motion would like using this approach.\u003c/p\u003e\n","description":"Understanding line-of-sight is hard, let's make it easier","image":null,"permalink":"https://forrestfwilliams.com/blogs/los/","title":"An InSAR Colorsphere"},{"content":"\u003ch2 id=\"the-problem\"\u003eThe Problem\u003c/h2\u003e\n\u003cp\u003eLike most forms of data analysis, remote sensing has traditionally operated in a file-first paradigm. In this setup, data is packaged in discrete files or zip archives and these are downloaded/decompressed to a local environment before you begin analyzing the data.\u003c/p\u003e\n\u003cp\u003eHowever, with the growth in dataset sizes, the move to cloud-based computing, and new tools like \u003ca href=\"https://docs.xarray.dev/en/stable/index.html\"\u003eXarray\u003c/a\u003e, the industry is moving towards a dataset-first paradigm. In a dataset-first paradigm we think about grabbing the specific data we want from a global dataset instead of downloading discrete files that contain portions of the dataset. If you want an example of how this is done, go check out the \u003ca href=\"https://pangeo.io\"\u003ePANGEO\u003c/a\u003e project! A major advantage of this approach is that you can specify an area-of-interest/time-of-interest, and download only the data you \u003cem\u003eactually\u003c/em\u003e need - greatly decreasing the amount of data you need to download!\u003c/p\u003e\n\u003cp\u003eUnfortunately though, the ways in which many older datasets are packaged makes it difficult to provide dataset-first services for them. The \u003ca href=\"https://fsspec.github.io/kerchunk/\"\u003eKerchunk\u003c/a\u003e project is working to overcome these issues, but a major stumbling block we\u0026rsquo;ll need to fix is the limitations on data access that many compression types impose.\u003c/p\u003e\n\u003cp\u003eCompression is a key way that we can increase download speeds and reduce data storage costs, but many compression types such as the popular \u003ca href=\"https://www.rfc-editor.org/rfc/rfc1951\"\u003eDEFLATE\u003c/a\u003e compression used in gzip and zip files \u003cstrong\u003edo not support random access reads\u003c/strong\u003e. This isn\u0026rsquo;t a problem if you plan to download/decompress the whole data file, but dataset-first access patterns rely on the ability to grab only the data they need from much larger files (i.e., random access reads). Since \u003cem\u003eSO\u003c/em\u003e much data is stored in either gzip or zip archives, this severely limits our ability to provide dataset-first access to older data.\u003c/p\u003e\n\u003cp\u003eI\u0026rsquo;ve been working on a new project that should make this much easier though!\u003c/p\u003e\n\u003ch2 id=\"enter-zran\"\u003eEnter ZRAN\u003c/h2\u003e\n\u003cp\u003eI\u0026rsquo;m not the first person to think about this problem, in fact Mark Adler the creator of the DEFLATE algorithm and the popular Zlib package has already come up with a solution. He developed a utility called ZRAN that can provide pseudo-random reads for DEFLATE-compressed data. It turns out that DEFLATE-compressed data is compressed in discrete 10-100 Kb blocks, and if the Zlib package is provided with the right information, it can start decompressing from any of these block boundaries!\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/zran.svg\" alt=\"ZRAN diagram\"\u003e\u003c/p\u003e\n\u003cp\u003eIn practice, ZRAN decompresses the data once, then uses information gained while decompressing to create a sidecar index file that contains \u0026ldquo;bookmarks\u0026rdquo; into the compressed. You can then use the \u0026ldquo;bookmarks\u0026rdquo; contained within the index file to start reading from any block boundary on subsequent reads.\u003c/p\u003e\n\u003cp\u003eYou can find Mark\u0026rsquo;s code in the \u003ca href=\"https://github.com/madler/zlib/tree/master/examples\"\u003eexamples directory\u003c/a\u003e of the Zlib GitHub repository! However, this utility was only available as a C-utility and could not be easily incorporated into dataset-first access projects (e.g., Xarray and Kerchunk) that are being developed in Python. If you are working exclusively with gzip files though, go give \u003ca href=\"https://github.com/pauldmccarthy/indexed_gzip\"\u003eindexed_gzip\u003c/a\u003e a try!\u003c/p\u003e\n\u003cp\u003eFixing this data access problem is very important to me, so I decided to take on the task of creating Python bindings for ZRAN using \u003ca href=\"https://cython.org\"\u003eCython\u003c/a\u003e. It was my first foray into the intimidating world of pointers and memory management, but I learned a lot and it was worth the effort! I combined the base ZRAN Cython bindings with some additional index manipulation to create what I hope is useful Python library for compressed data extraction. I also created a fair amount of GitHub Actions based CI/CD tooling for the project, which really helps me maintain and publish the package (if you want to hear more about this setup, let me know!).\u003c/p\u003e\n\u003cp\u003eTo use ZRAN Python library, you need to:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eCreate an index for a compressed file\u003c/li\u003e\n\u003cli\u003eOptionally save this index\u003c/li\u003e\n\u003cli\u003eUse this index to access the data on subsequent reads\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eTo create the index:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e zran\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003ewith\u003c/span\u003e open(\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;compressed.gz\u0026#39;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;rb\u0026#39;\u003c/span\u003e) \u003cspan style=\"color:#66d9ef\"\u003eas\u003c/span\u003e f:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    compressed_file \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e f\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eread()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    index \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e zran\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eIndex\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003ecreate_index(compressed_file)\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThis \u003ccode\u003eIndex\u003c/code\u003e can be written to a file (\u003ccode\u003eindex.to_file('index.dflidx')\u003c/code\u003e), or directly passed to \u003ccode\u003ezran.deompress\u003c/code\u003e:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003estart \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e1000\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003elength \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e2000\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003edata \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e zran\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003edecompress(compressed_file, index, start, length)\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThat\u0026rsquo;s it!\u003c/p\u003e\n\u003ch2 id=\"whats-next-for-zran\"\u003eWhat\u0026rsquo;s Next for ZRAN?\u003c/h2\u003e\n\u003cp\u003eWhile ZRAN is already a powerful tool for working with compressed data, I believe that there is much more that can be done with it. By combining ZRAN with other projects such as STAC and kerchunk, it may be possible to create a zarr-like interface for archival datasets! This would allow us to work with large datasets as if they were small, local files, without having to worry about the underlying complexity of the data storage.\u003c/p\u003e\n\u003cp\u003eIn the meantime, I\u0026rsquo;m already using the ZRAN python package in my \u003ca href=\"https://github.com/forrestfwilliams/index_safe\"\u003eSentinel-1 burst extractor project\u003c/a\u003e, which demonstrates its potential to be used in a wide range of applications. If you\u0026rsquo;re interested in trying out ZRAN for yourself, you can install from PyPI today!\u003c/p\u003e\n","description":"Random-access reads for deflate data!","image":null,"permalink":"https://forrestfwilliams.com/blogs/zran/","title":"ZRAN"},{"content":"\u003cp\u003eWelcome to my blog! My name is Forrest Williams, and I’m excited to introduce myself to you.\u003c/p\u003e\n\u003cp\u003eI recently graduated from a New Zealand university with a PhD in geology where I studied landslides, but I now find myself working in the fascinating (and confusing) world of synthetic aperture radar (SAR) remote sensing.\u003c/p\u003e\n\u003cp\u003eI work at the \u003ca href=\"https://asf.alaska.edu\"\u003eAlaska Satellite Facility\u003c/a\u003e (NASA’s SAR data center), where I am both a scientist and a software developer. It’s a tricky balance at times, but I enjoy the opportunities it gives me to design new SAR data products (check out the \u003ca href=\"https://hyp3-docs.asf.alaska.edu\"\u003eHyP3 project\u003c/a\u003e if you haven’t already!) and to participate in scientific projects that have a truly global scale.\u003c/p\u003e\n\u003cp\u003eIn my free time, I enjoy cooking, running, and hanging out with my wonderful wife Jessie.\u003c/p\u003e\n\u003cp\u003eIn this blog, I will be sharing my thoughts on the fascinating world of SAR, scientific software development, and the minutiae of cloud-based data access. Hopefully you’ll find these topics as interesting as I do!\u003c/p\u003e\n\u003cp\u003eThanks for taking the time to get to know me, I’m looking forward to sharing my journey with you!\u003c/p\u003e\n","description":"A little about me","image":null,"permalink":"https://forrestfwilliams.com/blogs/hello_world/","title":"Hello World!"}]